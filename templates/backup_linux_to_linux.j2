{% set step_counter = 1 %}
{{ step_counter }}. Ensure SSH access to target server {{ target_host }}.

{% set step_counter = step_counter + 1 %}
{{ step_counter }}. {% if versioning %}Create timestamped target folder:
    TIMESTAMP=$(date +"%Y%m%d")
    TARGET_FOLDER="{{ target_base }}/$TIMESTAMP"
    mkdir -p "$TARGET_FOLDER"
{% else %}Use target folder: {{ target_base }}
{% endif %}

{% set step_counter = step_counter + 1 %}
{{ step_counter }}. Back up source folders to defined backup location
{% for source_path in source_paths %}
    {{ step_counter }}.{{ loop.index }} Run rsync from source {{ source_path }} to {{ target_host }}:{{ target_folder }}
    :
    rsync {{ rsync_options }} {{ source_path }} {{ target_user }}@{{ target_host }}:{{ target_folder }}/
{% endfor %}

{% set step_counter = step_counter + 1 %}
{{ step_counter }}. Verify the files on {{ target_host }}.

{% if frequency %}
    {% set step_counter = step_counter + 1 %}
    {{ step_counter }}. Automate this backup with a cron job:

    - Edit your crontab:

    crontab -e

    - Example entry (daily at 2:00 AM):

    0 2 * * * /path/to/backup_script.sh >> /var/log/backup.log 2>&1

    - The backup_script.sh should:
    - Find previous backup
    - Create new timestamped folder
    - Run rsync with --link-dest
    - Run retention command
{% endif %}

{% if retention_days and versioning %}
    {% set step_counter = step_counter + 1 %}
    {{ step_counter }}. Optional: remove old backups older than {{ retention_days }} days:
    find {{ target_base }}/ -maxdepth 1 -type d -mtime +{{ retention_days }} -exec rm -rf {} \;
{% endif %}